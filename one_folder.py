from cleanvision import Imagelab
import os
from PIL import Image
import warnings
import traceback
import tempfile
import shutil
from tqdm import tqdm

TARGET_FOLDER = "raw_dataset/Roman Forum"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–∞–ø–∫—É

def process_with_cleanvision(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —á–µ—Ä–µ–∑ CleanVision –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—É
        with tempfile.TemporaryDirectory() as tmp_dir:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            tmp_file = os.path.join(tmp_dir, os.path.basename(file_path))
            shutil.copyfile(file_path, tmp_file)

            # –ó–∞–ø—É—Å–∫–∞–µ–º CleanVision
            imagelab = Imagelab(data_path=tmp_dir)
            imagelab.find_issues()

        return True, None

    except Exception as e:
        error_info = {
            'file': file_path,
            'error_type': type(e).__name__,
            'message': str(e),
            'traceback': traceback.format_exc()
        }
        return False, error_info

def check_image_integrity(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞"""
    try:
        with Image.open(file_path) as img:
            img.verify()
        return True
    except Exception as e:
        return False

def main():
    if not os.path.exists(TARGET_FOLDER):
        print(f"–ü–∞–ø–∫–∞ {TARGET_FOLDER} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    all_files = []
    for root, _, files in os.walk(TARGET_FOLDER):
        all_files.extend([os.path.join(root, f) for f in files])

    print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(all_files)} —Ñ–∞–π–ª–æ–≤ –≤ {TARGET_FOLDER}")

    results = {'good': [], 'bad': [], 'cleanvision_errors': []}

    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    for file_path in tqdm(all_files, desc="–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"):
        if not check_image_integrity(file_path):
            results['bad'].append(file_path)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CleanVision —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª—ã—Ö —Ñ–∞–π–ª–æ–≤
    clean_files = [f for f in all_files if f not in results['bad']]
    
    for file_path in tqdm(clean_files, desc="CleanVision –∞–Ω–∞–ª–∏–∑"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CleanVision
        success, error = process_with_cleanvision(file_path)
        
        if success:
            results['good'].append(file_path)
        else:
            results['cleanvision_errors'].append(error)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"‚úÖ –¶–µ–ª—ã–µ —Ñ–∞–π–ª—ã: {len(results['good'])}")
    print(f"‚õî –ë–∏—Ç—ã–µ —Ñ–∞–π–ª—ã: {len(results['bad'])}")
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ CleanVision: {len(results['cleanvision_errors'])}")

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
    if results['cleanvision_errors']:
        print("\nüî• –û—à–∏–±–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ CleanVision:")
        for error in results['cleanvision_errors']:
            print(f"\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨")
            print(f"üìÅ –§–∞–π–ª: {error['file']}")
            print(f"üö® –û—à–∏–±–∫–∞: {error['error_type']}")
            print(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {error['message']}")
            print("üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
            print(error['traceback'])

    if results['bad']:
        print("\nüóëÔ∏è –ë–∏—Ç—ã–µ —Ñ–∞–π–ª—ã:")
        for file in results['bad']:
            print(f"‚Ä¢ {file}")

if __name__ == "__main__":
    warnings.filterwarnings("ignore", category=UserWarning)
    main()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")