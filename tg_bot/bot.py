import json
import os
import tempfile
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from predict import predict_image

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '7902173052:AAHTzM91bNYninOEKFVjyktVZhgz9BV8DKQ'
LABELS_PATH = 'labels.json'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data['stopped'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    context.user_data['stopped'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    user = update.effective_user
    await update.message.reply_text(
        f"–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, {user.first_name}!\n"
        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    temp_path = None
    try:
        if context.user_data.get('stopped', False):
            await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
            return

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as f:
            temp_path = f.name
            await photo_file.download_to_drive(temp_path)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = str(predict_image(temp_path))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫–∏
        with open(LABELS_PATH, 'r', encoding='utf-8') as f:
            labels = json.load(f)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        landmark_info = labels.get(prediction, {})
        response = (
            "üåç *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:*\n"
            f"üèõ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {landmark_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* {landmark_info.get('info', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {landmark_info.get('location', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí° *–°–æ–≤–µ—Ç—ã —Ç—É—Ä–∏—Å—Ç–∞–º:* {landmark_info.get('tips', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')}"
        )

        await update.message.reply_markdown(response)

    except Exception as e:
        await update.message.reply_text(f'‚õî –û—à–∏–±–∫–∞: {str(e)}')
    finally:
        if temp_path and os.path.exists(temp_path):
            os.remove(temp_path)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    application.run_polling()

if __name__ == '__main__':
    main()